!function(){"use strict";document.querySelector("#image-modal");class e{constructor(e,t,n){let{name:s,link:r}=e;this._name=s,this._link=r,this._cardSelector=t,this._cardElement=this._getTemplate(),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._cardDeleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._handleImageClick=n,this._setEventListeners()}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleLikeIcon(){this._cardLikeButton.classList.toggle("card__like-button_active")}_handleDeleteCard(){this._cardElement.remove()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._cardElement}}class t{constructor(e){this._popupElement=document.querySelector(e),this._popupCloseButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupCloseButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal")&&this.close()}))}}class n extends t{constructor(e,t){super(e),this._form=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t}_getInputValues(){const e={};return this._form.querySelectorAll(".modal__input").forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this._submitHandler)}_submitHandler=e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)};close(){super.close(),this._form.reset()}}var s=class{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e._errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_disableButton(e){e.disabled=!0,e.classList.add(this._inactiveButtonClass)}_enableButton(e){e.disabled=!1,e.classList.remove(this._inactiveButtonClass)}_toggleButtonState(){if(this._hasInvalidInput(this._inputElements))return this._disableButton(this._submitButton);this._enableButton(this._submitButton)}resetValidation(){this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};const r=document.querySelector("#owner-name"),o=document.querySelector("#owner-description"),i=document.querySelector(".cards__list"),a=document.querySelector(".profile__edit-button"),l=document.querySelector(".profile__card-add-button"),c=(document.querySelector(".modal__input-title"),document.querySelector(".modal__input-link"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input-type-error",errorClass:"modal__error_visible"}),u=document.querySelector("#add-card-modal"),d=document.querySelector("#edit-profile-modal").querySelector(".modal__form"),m=u.querySelector(".modal__form"),_=new class{constructor(e,t){let{items:n,renderer:s}=e;this._items=n,this._renderer=s,this._container=t}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=h(e);_.addItem(t)}},i);function h(t){return new e(t,"#card-template",p).getView()}function p(e){S.open(e)}_.renderItems();const E=new class{constructor(e){this.nameElement=document.querySelector(e.userNameSelector),this.jobElement=document.querySelector(e.userTitleSelector)}getUserInfo(){return{name:this.nameElement.textContent,job:this.jobElement.textContent}}setUserInfo(e){this.nameElement.textContent=e.title,this.jobElement.textContent=e.description}}({userNameSelector:".profile__title",userTitleSelector:".profile__description"}),S=new class extends t{constructor(e){super(e),this._containerImage=this._popupElement.querySelector(".modal__conatiner-image"),this._containerImageTitle=this._popupElement.querySelector(".modal__image_title")}open(e){let{name:t,link:n}=e;const s=this._containerImage.querySelector(".modal__image");this._containerImageTitle.textContent=t,s.alt=t,s.src=n,super.open()}}("#image-modal",(function(e){S.open(e)}));S.setEventListeners();const v=new n("#edit-profile-modal",(function(e){E.setUserInfo(e),v.close()}));v.setEventListeners(),a.addEventListener("click",(()=>{!function(){const e=E.getUserInfo();r.value=e.name,o.value=e.job,v.open()}()}));const f=new n("#add-card-modal",(function(e){const{title:t,description:n}=e,s=h({name:t,link:n});_.addItem(s),f.close()}));f.setEventListeners(),l.addEventListener("click",(()=>{g.resetValidation(),f.open()})),new s(c,d).enableValidation();const g=new s(c,m);g.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q25DekMsRUFDQUcsR0FFdUJULG1CQUV6QixNQUFNOEMsRUFBdUIsSUFBSUMsRUFBY3pDLEVBQW9CSSxHQUNuRW9DLEVBQXFCOUMsa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvdXRpbHMvQ29uc3RhbnRzLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByZXZpZXdNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaW1hZ2UtbW9kYWxcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGxpbmsgfSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVJbWFnZUNsaWNrKSB7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgdGhpcy5fbGluayA9IGxpbms7XG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcbiAgICB0aGlzLl9jYXJkTGlrZUJ1dHRvbiA9XG4gICAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xuICAgIHRoaXMuX2NhcmREZWxldGVCdXR0b24gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiXG4gICAgKTtcbiAgICB0aGlzLl9jYXJkSW1hZ2UgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fY2FyZExpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUxpa2VJY29uKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9jYXJkRGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVDYXJkKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2soeyBuYW1lOiB0aGlzLl9uYW1lLCBsaW5rOiB0aGlzLl9saW5rIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2hhbmRsZUxpa2VJY29uKCkge1xuICAgIHRoaXMuX2NhcmRMaWtlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XG4gIH1cblxuICBfaGFuZGxlRGVsZXRlQ2FyZCgpIHtcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcbiAgfVxuXG4gIF9nZXRUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcbiAgfVxuXG4gIGdldFZpZXcoKSB7XG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XG4gICAgdGhpcy5fY2FyZEltYWdlLmFsdCA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG5cbiAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XG4gIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX3BvcHVwQ2xvc2VCdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2xvc2VcIik7XG4gIH1cblxuICBvcGVuKCkge1xuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuXG4gIF9oYW5kbGVFc2NDbG9zZSA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH07XG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX3BvcHVwQ2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9KTtcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZXZ0KSA9PiB7XG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbFwiKSkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFBvcHVwIH0gZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCkge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcbiAgfVxuXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fTtcbiAgICB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICB2YWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5fc3VibWl0SGFuZGxlcik7XG4gIH1cblxuICBfc3VibWl0SGFuZGxlciA9IChldnQpID0+IHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHRoaXMuX2dldElucHV0VmFsdWVzKCk7XG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdChpbnB1dFZhbHVlcyk7XG4gIH07XG5cbiAgY2xvc2UoKSB7XG4gICAgc3VwZXIuY2xvc2UoKTtcbiAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XG4gIH1cbn1cbiIsImNsYXNzIEZvcm1WYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgZm9ybUVsZW1lbnQpIHtcbiAgICB0aGlzLl9mb3JtU2VsZWN0b3IgPSBzZXR0aW5ncy5mb3JtU2VsZWN0b3I7XG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IHNldHRpbmdzLmlucHV0U2VsZWN0b3I7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBzZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBzZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3M7XG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IHNldHRpbmdzLl9lcnJvckNsYXNzO1xuXG4gICAgdGhpcy5fZm9ybSA9IGZvcm1FbGVtZW50O1xuICB9XG5cbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcbiAgICApO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JNZXNzYWdlRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XG4gIH1cblxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxuICAgICk7XG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XG4gIH1cblxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICB9XG4gICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgfVxuXG4gIF9oYXNJbnZhbGlkSW5wdXQoaW5wdXRFbGVtZW50cykge1xuICAgIHJldHVybiAhaW5wdXRFbGVtZW50cy5ldmVyeSgoaW5wdXRFbGVtZW50KSA9PiBpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpO1xuICB9XG5cbiAgX2Rpc2FibGVCdXR0b24oc3VibWl0QnV0dG9uKSB7XG4gICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICBzdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgfVxuXG4gIF9lbmFibGVCdXR0b24oc3VibWl0QnV0dG9uKSB7XG4gICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gIH1cblxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCh0aGlzLl9pbnB1dEVsZW1lbnRzKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVCdXR0b24odGhpcy5fc3VibWl0QnV0dG9uKTtcbiAgICB9XG4gICAgdGhpcy5fZW5hYmxlQnV0dG9uKHRoaXMuX3N1Ym1pdEJ1dHRvbik7XG4gIH1cblxuICByZXNldFZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcblxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2lucHV0RWxlbWVudHMgPSBbLi4udGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb3JtVmFsaWRhdG9yO1xuIiwiZXhwb3J0IGNvbnN0IHVzZXJOYW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI293bmVyLW5hbWVcIik7XG5leHBvcnQgY29uc3QgdXNlckRlc2NyaXB0aW9uSW5wdXQgPVxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI293bmVyLWRlc2NyaXB0aW9uXCIpO1xuXG5leHBvcnQgY29uc3QgY2FyZHNMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fbGlzdFwiKTtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcbiAge1xuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWtlLWxvdWlzZS5qcGdcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXG4gIH0sXG5dO1xuXG5leHBvcnQgY29uc3QgY2FyZERhdGEgPSB7XG4gIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXG4gIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC95b3NlbWl0ZS5qcGdcIixcbn07XG5cbmV4cG9ydCBjb25zdCBjYXJkU2VsZWN0b3IgPSBcIiNjYXJkLXRlbXBsYXRlXCI7XG5cbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLnByb2ZpbGVfX2VkaXQtYnV0dG9uXCJcbik7XG5cbmV4cG9ydCBjb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgXCIucHJvZmlsZV9fY2FyZC1hZGQtYnV0dG9uXCJcbik7XG5leHBvcnQgY29uc3QgYWRkQ2FyZFRpdGxlRmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbnB1dC10aXRsZVwiKTtcbmV4cG9ydCBjb25zdCBhZGRDYXJkSW1hZ2VMaW5rRmllbGQgPVxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbnB1dC1saW5rXCIpO1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvblNldHRpbmdzID0ge1xuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX2J1dHRvblwiLFxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dC10eXBlLWVycm9yXCIsXG4gIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcbn07XG5cbmV4cG9ydCBjb25zdCBhZGRDYXJkTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1jYXJkLW1vZGFsXCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0TW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2VkaXQtcHJvZmlsZS1tb2RhbFwiKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdEZvcm0gPSBwcm9maWxlRWRpdE1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XG5leHBvcnQgY29uc3QgYWRkQ2FyZEZvcm0gPSBhZGRDYXJkTW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcbiIsImltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBwb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQge1xuICB1c2VyTmFtZUlucHV0LFxuICB1c2VyRGVzY3JpcHRpb25JbnB1dCxcbiAgY2FyZHNMaXN0LFxuICBpbml0aWFsQ2FyZHMsXG4gIGNhcmREYXRhLFxuICBjYXJkU2VsZWN0b3IsXG4gIHByb2ZpbGVFZGl0QnV0dG9uLFxuICBhZGRDYXJkQnV0dG9uLFxuICBhZGRDYXJkVGl0bGVGaWVsZCxcbiAgYWRkQ2FyZEltYWdlTGlua0ZpZWxkLFxuICB2YWxpZGF0aW9uU2V0dGluZ3MsXG4gIHByb2ZpbGVFZGl0Rm9ybSxcbiAgYWRkQ2FyZEZvcm0sXG59IGZyb20gXCIuLi91dGlscy9Db25zdGFudHMuanNcIjtcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5cbi8vICAgICBfXyAgIF9fX18gIF9fX18gICBfX18gICAgICAgICAgICAgX19fX18gICBfX18gICAgIF9fIF9fX19fXyAgX19fXyAgX19fICAgX19fX1xuLy8gICAgLyAgXSAvICAgIFR8ICAgIFxcIHwgICBcXCAgICAgICAgICAgLyBfX18vICAvICBfXSAgIC8gIF0gICAgICBUbCAgICBqLyAgIFxcIHwgICAgXFxcbi8vICAgLyAgLyBZICBvICB8fCAgRCAgKXwgICAgXFwgICAgICAgICAoICAgXFxfICAvICBbXyAgIC8gIC98ICAgICAgfCB8ICBUWSAgICAgWXwgIF8gIFlcbi8vICAvICAvICB8ICAgICB8fCAgICAvIHwgIEQgIFkgICAgICAgICBcXF9fICBUWSAgICBfXSAvICAvIGxfaiAgbF9qIHwgIHx8ICBPICB8fCAgfCAgfFxuLy8gLyAgIFxcXyB8ICBfICB8fCAgICBcXCB8ICAgICB8ICAgICAgICAgLyAgXFwgfHwgICBbXyAvICAgXFxfICB8ICB8ICAgfCAgfHwgICAgIHx8ICB8ICB8XG4vLyBcXCAgICAgfHwgIHwgIHx8ICAuICBZfCAgICAgfCAgICAgICAgIFxcICAgIHx8ICAgICBUXFwgICAgIHwgfCAgfCAgIGogIGxsICAgICAhfCAgfCAgfFxuLy8gIFxcX19fX2psX19qX19qbF9falxcX2psX19fX19qICAgICAgICAgIFxcX19famxfX19fX2ogXFxfX19faiBsX19qICB8X19fX2pcXF9fXy8gbF9fal9falxuXG5jb25zdCBzZWN0aW9uID0gbmV3IFNlY3Rpb24oXG4gIHtcbiAgICBpdGVtczogaW5pdGlhbENhcmRzLFxuICAgIHJlbmRlcmVyOiAoY2FyZERhdGEpID0+IHtcbiAgICAgIGNvbnN0IGNhcmQgPSBjcmVhdGVDYXJkKGNhcmREYXRhKTtcbiAgICAgIHNlY3Rpb24uYWRkSXRlbShjYXJkKTtcbiAgICB9LFxuICB9LFxuICBjYXJkc0xpc3Rcbik7XG5zZWN0aW9uLnJlbmRlckl0ZW1zKCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoY2FyZERhdGEpIHtcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKGNhcmREYXRhLCBjYXJkU2VsZWN0b3IsIGhhbmRsZUNhcmRDbGljayk7XG4gIHJldHVybiBjYXJkLmdldFZpZXcoKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ2FyZENsaWNrKGNhcmREYXRhKSB7XG4gIHByZXZpZXdJbWFnZVBvcHVwLm9wZW4oY2FyZERhdGEpO1xufVxuXG4vLyAgX18gX18gIF9fX19fICAgX19fICBfX19fICAgICAgIF9fX18gIF9fX18gICBfX19fXyAgIF9fX1xuLy8gfCAgVCAgVC8gX19fLyAgLyAgX118ICAgIFxcICAgICBsICAgIGp8ICAgIFxcIHwgICAgIHwgLyAgIFxcXG4vLyB8ICB8ICAoICAgXFxfICAvICBbXyB8ICBEICApICAgICB8ICBUIHwgIF8gIFl8ICAgX19qWSAgICAgWVxuLy8gfCAgfCAgfFxcX18gIFRZICAgIF9dfCAgICAvICAgICAgfCAgfCB8ICB8ICB8fCAgbF8gIHwgIE8gIHxcbi8vIHwgIDogIHwvICBcXCB8fCAgIFtfIHwgICAgXFwgICAgICB8ICB8IHwgIHwgIHx8ICAgX10gfCAgICAgfFxuLy8gbCAgICAgfFxcICAgIHx8ICAgICBUfCAgLiAgWSAgICAgaiAgbCB8ICB8ICB8fCAgVCAgIGwgICAgICFcbi8vICBcXF9fLF9qIFxcX19famxfX19fX2psX19qXFxfaiAgICB8X19fX2psX19qX19qbF9faiAgICBcXF9fXy9cblxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xuICB1c2VyTmFtZVNlbGVjdG9yOiBcIi5wcm9maWxlX190aXRsZVwiLFxuICB1c2VyVGl0bGVTZWxlY3RvcjogXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcbn0pO1xuXG4vLyAgX19fXyAgICBfX18gICBfX19fICBfXyBfXyAgX19fXyAgX18gICAgX18gIF9fX18gIF9fX19fXyAgX18gX18gIF9fX18gIF9fXyBfX18gICBfX19fICAgX19fXyAgICBfX19cbi8vIHwgICAgXFwgIC8gICBcXCB8ICAgIFxcfCAgVCAgVHwgICAgXFx8ICBUX19UICBUbCAgICBqfCAgICAgIFR8ICBUICBUbCAgICBqfCAgIFQgICBUIC8gICAgVCAvICAgIFQgIC8gIF9dXG4vLyB8ICBvICApWSAgICAgWXwgIG8gICkgIHwgIHx8ICBvICApICB8ICB8ICB8IHwgIFQgfCAgICAgIHx8ICBsICB8IHwgIFQgfCBfICAgXyB8WSAgbyAgfFkgICBfX2ogLyAgW19cbi8vIHwgICBfLyB8ICBPICB8fCAgIF8vfCAgfCAgfHwgICBfL3wgIHwgIHwgIHwgfCAgfCBsX2ogIGxfanwgIF8gIHwgfCAgfCB8ICBcXF8vICB8fCAgICAgfHwgIFQgIHxZICAgIF9dXG4vLyB8ICB8ICAgfCAgICAgfHwgIHwgIHwgIDogIHx8ICB8ICBsICBgICAnICAhIHwgIHwgICB8ICB8ICB8ICB8ICB8IHwgIHwgfCAgIHwgICB8fCAgXyAgfHwgIGxfIHx8ICAgW19cbi8vIHwgIHwgICBsICAgICAhfCAgfCAgbCAgICAgfHwgIHwgICBcXCAgICAgIC8gIGogIGwgICB8ICB8ICB8ICB8ICB8IGogIGwgfCAgIHwgICB8fCAgfCAgfHwgICAgIHx8ICAgICBUXG4vLyBsX19qICAgIFxcX19fLyBsX19qICAgXFxfXyxfamxfX2ogICAgXFxfL1xcXy8gIHxfX19faiAgbF9faiAgbF9fal9fanxfX19famxfX19qX19famxfX2pfX2psX19fLF9qbF9fX19falxuXG5jb25zdCBwcmV2aWV3SW1hZ2VQb3B1cCA9IG5ldyBwb3B1cFdpdGhJbWFnZShcIiNpbWFnZS1tb2RhbFwiLCBoYW5kbGVJbWFnZUNsaWNrKTtcbnByZXZpZXdJbWFnZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmZ1bmN0aW9uIGhhbmRsZUltYWdlQ2xpY2soY2FyZERhdGEpIHtcbiAgcHJldmlld0ltYWdlUG9wdXAub3BlbihjYXJkRGF0YSk7XG59XG5cbi8vICBfX19fICAgIF9fXyAgIF9fX18gIF9fIF9fICBfX19fICBfXyAgICBfXyAgX19fXyAgX19fX19fICBfXyBfXyAgX19fX18gIF9fX18gICAgX19fICAgX19fIF9fX1xuLy8gfCAgICBcXCAgLyAgIFxcIHwgICAgXFx8ICBUICBUfCAgICBcXHwgIFRfX1QgIFRsICAgIGp8ICAgICAgVHwgIFQgIFR8ICAgICB8fCAgICBcXCAgLyAgIFxcIHwgICBUICAgVFxuLy8gfCAgbyAgKVkgICAgIFl8ICBvICApICB8ICB8fCAgbyAgKSAgfCAgfCAgfCB8ICBUIHwgICAgICB8fCAgbCAgfHwgICBfX2p8ICBEICApWSAgICAgWXwgXyAgIF8gfFxuLy8gfCAgIF8vIHwgIE8gIHx8ICAgXy98ICB8ICB8fCAgIF8vfCAgfCAgfCAgfCB8ICB8IGxfaiAgbF9qfCAgXyAgfHwgIGxfICB8ICAgIC8gfCAgTyAgfHwgIFxcXy8gIHxcbi8vIHwgIHwgICB8ICAgICB8fCAgfCAgfCAgOiAgfHwgIHwgIGwgIGAgICcgICEgfCAgfCAgIHwgIHwgIHwgIHwgIHx8ICAgX10gfCAgICBcXCB8ICAgICB8fCAgIHwgICB8XG4vLyB8ICB8ICAgbCAgICAgIXwgIHwgIGwgICAgIHx8ICB8ICAgXFwgICAgICAvICBqICBsICAgfCAgfCAgfCAgfCAgfHwgIFQgICB8ICAuICBZbCAgICAgIXwgICB8ICAgfFxuLy8gbF9faiAgICBcXF9fXy8gbF9faiAgIFxcX18sX2psX19qICAgIFxcXy9cXF8vICB8X19fX2ogIGxfX2ogIGxfX2pfX2psX19qICAgbF9falxcX2ogXFxfX18vIGxfX19qX19falxuXG4vLyBFZGl0IFByb2ZpbGUgTW9kYWxcbmNvbnN0IHByb2ZpbGVFZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcbiAgXCIjZWRpdC1wcm9maWxlLW1vZGFsXCIsXG4gIGhhbmRsZUVkaXRQcm9maWxlU3VibWl0XG4pO1xucHJvZmlsZUVkaXRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xucHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgaGFuZGxlUHJvZmlsZUVkaXRDbGljaygpO1xufSk7XG5cbmZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVFZGl0Q2xpY2soKSB7XG4gIGNvbnN0IHVzZXIgPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xuICB1c2VyTmFtZUlucHV0LnZhbHVlID0gdXNlci5uYW1lO1xuICB1c2VyRGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IHVzZXIuam9iO1xuICBwcm9maWxlRWRpdFBvcHVwLm9wZW4oKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRWRpdFByb2ZpbGVTdWJtaXQoaW5wdXRWYWx1ZXMpIHtcbiAgdXNlckluZm8uc2V0VXNlckluZm8oaW5wdXRWYWx1ZXMpO1xuICBwcm9maWxlRWRpdFBvcHVwLmNsb3NlKCk7XG59XG5cbi8vIEFkZCBDYXJkIE1vZGFsXG5jb25zdCBhZGRDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNhZGQtY2FyZC1tb2RhbFwiLCBoYW5kbGVBZGRDYXJkU3VibWl0KTtcbmFkZENhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuYWRkQ2FyZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBhZGRDYXJkRm9ybVZhbGlkYXRvci5yZXNldFZhbGlkYXRpb24oKTtcbiAgYWRkQ2FyZFBvcHVwLm9wZW4oKTtcbn0pO1xuXG5mdW5jdGlvbiBoYW5kbGVBZGRDYXJkU3VibWl0KGlucHV0VmFsdWVzKSB7XG4gIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uIH0gPSBpbnB1dFZhbHVlcztcbiAgY29uc3QgbmV3Q2FyZERhdGEgPSB7XG4gICAgbmFtZTogdGl0bGUsXG4gICAgbGluazogZGVzY3JpcHRpb24sXG4gIH07XG4gIGNvbnN0IG5ld0NhcmQgPSBjcmVhdGVDYXJkKG5ld0NhcmREYXRhKTtcbiAgc2VjdGlvbi5hZGRJdGVtKG5ld0NhcmQpO1xuICBhZGRDYXJkUG9wdXAuY2xvc2UoKTtcbn1cblxuLy8gICBfX19fXyAgICAgICAgICAgICAgICAgICAgIF9fICAgICBfXyAgICBfIF8gICAgIF8gICAgICAgXyAgIF9cbi8vICB8ICBfX198X18gIF8gX18gXyBfXyBfX18gICBcXCBcXCAgIC8gL18gX3wgKF8pIF9ffCB8IF9fIF98IHxfKF8pIF9fXyAgXyBfX1xuLy8gIHwgfF8gLyBfIFxcfCAnX198ICdfIGAgXyBcXCAgIFxcIFxcIC8gLyBfYCB8IHwgfC8gX2AgfC8gX2AgfCBfX3wgfC8gXyBcXHwgJ18gXFxcbi8vICB8ICBffCAoXykgfCB8ICB8IHwgfCB8IHwgfCAgIFxcIFYgLyAoX3wgfCB8IHwgKF98IHwgKF98IHwgfF98IHwgKF8pIHwgfCB8IHxcbi8vICB8X3wgIFxcX19fL3xffCAgfF98IHxffCB8X3wgICAgXFxfLyBcXF9fLF98X3xffFxcX18sX3xcXF9fLF98XFxfX3xffFxcX19fL3xffCB8X3xcblxuY29uc3QgZWRpdFByb2ZpbGVGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoXG4gIHZhbGlkYXRpb25TZXR0aW5ncyxcbiAgcHJvZmlsZUVkaXRGb3JtXG4pO1xuZWRpdFByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuY29uc3QgYWRkQ2FyZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uU2V0dGluZ3MsIGFkZENhcmRGb3JtKTtcbmFkZENhcmRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjb250YWluZXIpIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyO1xuICB9XG5cbiAgcmVuZGVySXRlbXMoKSB7XG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRJdGVtKGl0ZW0pIHtcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChpdGVtKTtcbiAgfVxufVxuIiwiY29uc3QgdXNlciA9IHsgbmFtZTogXCJcIiwgam9iOiBcIlwiIH07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3Ioc2VsZWN0b3JzKSB7XG4gICAgdGhpcy5uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLnVzZXJOYW1lU2VsZWN0b3IpO1xuICAgIHRoaXMuam9iRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLnVzZXJUaXRsZVNlbGVjdG9yKTtcbiAgfVxuXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWVFbGVtZW50LnRleHRDb250ZW50LFxuICAgICAgam9iOiB0aGlzLmpvYkVsZW1lbnQudGV4dENvbnRlbnQsXG4gICAgfTtcbiAgfVxuXG4gIHNldFVzZXJJbmZvKHVzZXIpIHtcbiAgICB0aGlzLm5hbWVFbGVtZW50LnRleHRDb250ZW50ID0gdXNlci50aXRsZTtcbiAgICB0aGlzLmpvYkVsZW1lbnQudGV4dENvbnRlbnQgPSB1c2VyLmRlc2NyaXB0aW9uO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQb3B1cCB9IGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fY29udGFpbmVySW1hZ2UgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiLm1vZGFsX19jb25hdGluZXItaW1hZ2VcIlxuICAgICk7XG4gICAgdGhpcy5fY29udGFpbmVySW1hZ2VUaXRsZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIubW9kYWxfX2ltYWdlX3RpdGxlXCJcbiAgICApO1xuICB9XG5cbiAgb3Blbih7IG5hbWUsIGxpbmsgfSkge1xuICAgIGNvbnN0IGltYWdlID0gdGhpcy5fY29udGFpbmVySW1hZ2UucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2VcIik7XG4gICAgdGhpcy5fY29udGFpbmVySW1hZ2VUaXRsZS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgaW1hZ2UuYWx0ID0gbmFtZTtcbiAgICBpbWFnZS5zcmMgPSBsaW5rO1xuICAgIHN1cGVyLm9wZW4oKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIkNhcmQiLCJjb25zdHJ1Y3RvciIsIl9yZWYiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwibmFtZSIsImxpbmsiLCJ0aGlzIiwiX25hbWUiLCJfbGluayIsIl9jYXJkU2VsZWN0b3IiLCJfY2FyZEVsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJfY2FyZExpa2VCdXR0b24iLCJfY2FyZERlbGV0ZUJ1dHRvbiIsIl9jYXJkSW1hZ2UiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9zZXRFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaGFuZGxlTGlrZUljb24iLCJfaGFuZGxlRGVsZXRlQ2FyZCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInJlbW92ZSIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJnZXRWaWV3Iiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50IiwiX3BvcHVwQ2xvc2VCdXR0b24iLCJvcGVuIiwiYWRkIiwiX2hhbmRsZUVzY0Nsb3NlIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsImV2dCIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9mb3JtIiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJ2YWx1ZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImlucHV0IiwidmFsdWUiLCJfc3VibWl0SGFuZGxlciIsInByZXZlbnREZWZhdWx0IiwiaW5wdXRWYWx1ZXMiLCJyZXNldCIsInNldHRpbmdzIiwiZm9ybUVsZW1lbnQiLCJfZm9ybVNlbGVjdG9yIiwiZm9ybVNlbGVjdG9yIiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJfc2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsZW1lbnQiLCJlcnJvck1lc3NhZ2VFbGVtZW50IiwiaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oaWRlSW5wdXRFcnJvciIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hhc0ludmFsaWRJbnB1dCIsImlucHV0RWxlbWVudHMiLCJldmVyeSIsIl9kaXNhYmxlQnV0dG9uIiwic3VibWl0QnV0dG9uIiwiZGlzYWJsZWQiLCJfZW5hYmxlQnV0dG9uIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiX2lucHV0RWxlbWVudHMiLCJfc3VibWl0QnV0dG9uIiwicmVzZXRWYWxpZGF0aW9uIiwiZW5hYmxlVmFsaWRhdGlvbiIsInVzZXJOYW1lSW5wdXQiLCJ1c2VyRGVzY3JpcHRpb25JbnB1dCIsImNhcmRzTGlzdCIsInByb2ZpbGVFZGl0QnV0dG9uIiwiYWRkQ2FyZEJ1dHRvbiIsInZhbGlkYXRpb25TZXR0aW5ncyIsImVycm9yQ2xhc3MiLCJhZGRDYXJkTW9kYWwiLCJwcm9maWxlRWRpdEZvcm0iLCJhZGRDYXJkRm9ybSIsInNlY3Rpb24iLCJjb250YWluZXIiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInJlbmRlckl0ZW1zIiwiaXRlbSIsImFkZEl0ZW0iLCJwcmVwZW5kIiwiY2FyZERhdGEiLCJjYXJkIiwiY3JlYXRlQ2FyZCIsImhhbmRsZUNhcmRDbGljayIsInByZXZpZXdJbWFnZVBvcHVwIiwidXNlckluZm8iLCJzZWxlY3RvcnMiLCJuYW1lRWxlbWVudCIsInVzZXJOYW1lU2VsZWN0b3IiLCJqb2JFbGVtZW50IiwidXNlclRpdGxlU2VsZWN0b3IiLCJnZXRVc2VySW5mbyIsImpvYiIsInNldFVzZXJJbmZvIiwidXNlciIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJfY29udGFpbmVySW1hZ2UiLCJfY29udGFpbmVySW1hZ2VUaXRsZSIsImltYWdlIiwicHJvZmlsZUVkaXRQb3B1cCIsImhhbmRsZVByb2ZpbGVFZGl0Q2xpY2siLCJhZGRDYXJkUG9wdXAiLCJuZXdDYXJkIiwiYWRkQ2FyZEZvcm1WYWxpZGF0b3IiLCJGb3JtVmFsaWRhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==